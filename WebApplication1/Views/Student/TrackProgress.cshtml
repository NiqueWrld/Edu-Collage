@model List<WebApplication1.Models.ViewModels.QuizAttemptsViewModel>
@{
    ViewData["Title"] = "My Learning Progress";
    var currentDateTime = ViewBag.CurrentDateTime;
    var currentUser = ViewBag.CurrentUser;

    var stats = (Dictionary<string, object>)ViewBag.Statistics;
    int totalQuizzes = (int)stats["TotalQuizzes"];
    int totalAttempts = (int)stats["TotalAttempts"];
    int completedAttempts = (int)stats["CompletedAttempts"];
    double averageScore = (double)stats["AverageScore"];
    int bestScore = (int)stats["BestOverallScore"];

    // Assignment statistics
    int totalAssignments = stats.ContainsKey("TotalAssignments") ? (int)stats["TotalAssignments"] : 0;
    int submittedAssignments = stats.ContainsKey("SubmittedAssignments") ? (int)stats["SubmittedAssignments"] : 0;
    int gradedAssignments = stats.ContainsKey("GradedAssignments") ? (int)stats["GradedAssignments"] : 0;
    double avgAssignmentGrade = stats.ContainsKey("AverageAssignmentGrade") ? (double)stats["AverageAssignmentGrade"] : 0;

    var assignmentSubmissions = ViewBag.AssignmentSubmissions as List<WebApplication1.Models.AssignmentSubmission>;
}

<div class="bg-gradient-to-b from-gray-50 to-white min-h-screen pb-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-8">
        <!-- Header with Action Buttons -->
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold text-gray-900 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-3 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                    My Learning Progress
                </h1>
                <p class="mt-2 text-gray-600">Track your quiz performance and assignment grades</p>
                <div class="mt-2 text-sm text-gray-500 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Last updated: @currentDateTime
                </div>
            </div>
            <div class="mt-4 sm:mt-0 flex flex-col sm:flex-row gap-3">
                <div class="relative">
                    <button id="filter-button" class="flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                        </svg>
                        Filter
                    </button>
                </div>
                <button id="generate-pdf-btn" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    Download Report
                </button>
            </div>
        </div>

        <!-- Progress Summary -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-100 p-6 mb-8">
            <h2 class="text-lg font-medium text-gray-900 mb-4">Progress Overview</h2>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Quiz Progress -->
                <div>
                    <h3 class="text-sm font-medium text-gray-500 mb-2">Quiz Progress</h3>
                    <div class="flex items-end">
                        <div class="text-3xl font-bold text-indigo-600">@completedAttempts</div>
                        <div class="text-sm text-gray-500 ml-2 mb-1">of @totalAttempts attempts completed</div>
                    </div>
                    <div class="mt-3 relative pt-1">
                        <div class="overflow-hidden h-2 text-xs flex rounded bg-indigo-100">
                            <div style="width: @(totalAttempts > 0 ? (completedAttempts * 100 / totalAttempts) : 0)%" class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-indigo-600"></div>
                        </div>
                    </div>
                </div>

                <!-- Assignment Progress -->
                <div>
                    <h3 class="text-sm font-medium text-gray-500 mb-2">Assignment Progress</h3>
                    <div class="flex items-end">
                        <div class="text-3xl font-bold text-green-600">@gradedAssignments</div>
                        <div class="text-sm text-gray-500 ml-2 mb-1">of @totalAssignments assignments graded</div>
                    </div>
                    <div class="mt-3 relative pt-1">
                        <div class="overflow-hidden h-2 text-xs flex rounded bg-green-100">
                            <div style="width: @(totalAssignments > 0 ? (gradedAssignments * 100 / totalAssignments) : 0)%" class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-600"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="mb-10 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
            <!-- Total Quizzes -->
            <div class="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-100 transition-all hover:shadow-md">
                <div class="px-4 py-5 sm:p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-indigo-500 rounded-md p-3">
                            <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                            </svg>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Total Quizzes</dt>
                                <dd class="flex items-baseline">
                                    <div class="text-2xl font-semibold text-gray-900">@totalQuizzes</div>
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Total Attempts -->
            <div class="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-100 transition-all hover:shadow-md">
                <div class="px-4 py-5 sm:p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-blue-500 rounded-md p-3">
                            <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122" />
                            </svg>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Quiz Score</dt>
                                <dd class="flex items-baseline">
                                    <div class="text-2xl font-semibold text-gray-900">@averageScore.ToString("F1")</div>
                                    <div class="ml-2 text-sm font-medium text-gray-600">avg</div>
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Assignment Stats -->
            <div class="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-100 transition-all hover:shadow-md">
                <div class="px-4 py-5 sm:p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-blue-500 rounded-md p-3">
                            <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Assignments</dt>
                                <dd class="flex items-baseline">
                                    <div class="text-2xl font-semibold text-gray-900">@totalAssignments</div>
                                    <div class="ml-2 text-sm font-medium text-green-600">
                                        @submittedAssignments submitted
                                    </div>
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Average Assignment Grade -->
            <div class="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-100 transition-all hover:shadow-md">
                <div class="px-4 py-5 sm:p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-green-500 rounded-md p-3">
                            <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                            </svg>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Assignment Grade</dt>
                                <dd class="flex items-baseline">
                                    <div class="text-2xl font-semibold text-gray-900">
                                        @Math.Round(avgAssignmentGrade)
                                    </div>
                                    <div class="ml-2 text-sm font-medium text-gray-600">avg</div>
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab Navigation -->
        <div class="mb-6">
            <div class="border-b border-gray-200">
                <nav class="-mb-px flex space-x-8" aria-label="Tabs">
                    <button id="tab-quizzes" class="tab-button border-indigo-500 text-indigo-600 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                        Quizzes
                    </button>
                    <button id="tab-assignments" class="tab-button border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                        Assignments
                    </button>
                </nav>
            </div>
        </div>

        <!-- Quiz Attempts List by Module -->
        <div id="quizzes-panel" class="tab-panel bg-white shadow overflow-hidden sm:rounded-md mb-8">
            <div class="px-4 py-5 border-b border-gray-200 sm:px-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Quiz Attempts by Module</h3>
                <p class="mt-1 text-sm text-gray-500">All your quiz attempts organized by course module</p>
            </div>

            @if (Model.Count == 0)
            {
                <div class="px-4 py-12 text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No quiz attempts yet</h3>
                    <p class="mt-1 text-sm text-gray-500">Start taking quizzes to track your progress</p>
                </div>
            }
            else
            {
                <div class="accordion-container">
                    @{
                        var moduleGroups = Model
                        .GroupBy(q => q.Quiz.Module.ModuleId)
                        .Select(g => new
                        {
                            ModuleId = g.Key,
                            ModuleName = g.First().Quiz.Module.ModuleName,
                            ModuleCode = g.First().Quiz.Module.ModuleCode,
                            Quizzes = g.ToList()
                        })
                        .OrderBy(m => m.ModuleName)
                        .ToList();
                    }

                    @foreach (var module in moduleGroups)
                    {
                        <div class="module-accordion border-b border-gray-200">
                            <button class="accordion-header w-full px-4 py-4 flex justify-between items-center hover:bg-gray-50 focus:outline-none">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                                        <span class="text-indigo-700 font-medium">@module.ModuleCode.Substring(0, Math.Min(2, module.ModuleCode.Length))</span>
                                    </div>
                                    <div class="ml-4">
                                        <div class="text-left text-sm font-medium text-indigo-600">@module.ModuleCode</div>
                                        <div class="text-left text-lg font-medium text-gray-900">@module.ModuleName</div>
                                    </div>
                                </div>
                                <svg class="accordion-arrow h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                </svg>
                            </button>
                            <div class="accordion-content hidden px-4 py-2 pb-6">
                                <div class="overflow-x-auto">
                                    <table class="min-w-full divide-y divide-gray-200">
                                        <thead class="bg-gray-50">
                                            <tr>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quiz</th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attempts</th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Best Score</th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Attempt</th>
                                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody class="bg-white divide-y divide-gray-200">
                                            @foreach (var quizGroup in module.Quizzes.OrderBy(q => q.Quiz.Title))
                                            {
                                                var submittedAttempts = quizGroup.Attempts.Where(a => a.IsSubmitted).ToList();
                                                var bestScores = submittedAttempts.Any()
                                                ? submittedAttempts.Where(a => a.Score.HasValue).Max(a => a.Score) ?? 0
                                                : 0;
                                                var lastAttempt = quizGroup.Attempts.OrderByDescending(a => a.StartTime).FirstOrDefault();

                                                <tr class="hover:bg-gray-50">
                                                    <td class="px-6 py-4 whitespace-nowrap">
                                                        <div class="text-sm font-medium text-gray-900">@quizGroup.Quiz.Title</div>
                                                        <div class="text-sm text-gray-500">@quizGroup.Quiz.Description?.Substring(0, Math.Min(50, quizGroup.Quiz.Description?.Length ?? 0))</div>
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap">
                                                        <div class="text-sm text-gray-900">@quizGroup.Attempts.Count</div>
                                                        <div class="text-xs text-gray-500">@submittedAttempts.Count completed</div>
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap">
                                                        @if (bestScores > 0)
                                                        {
                                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                                @bestScores%
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-sm text-gray-500">-</span>
                                                        }
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        @(lastAttempt != null ? lastAttempt.StartTime.ToString("yyyy-MM-dd") : "-")
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                        <a href="@Url.Action("Details", "Quiz", new { id = quizGroup.Quiz.QuizId })" class="text-indigo-600 hover:text-indigo-900 mr-3">View Quiz</a>
                                                        <a href="#" class="text-indigo-600 hover:text-indigo-900">History</a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Assignment Submissions -->
        <div id="assignments-panel" class="tab-panel hidden bg-white shadow overflow-hidden sm:rounded-md mb-8">
            <div class="px-4 py-5 border-b border-gray-200 sm:px-6 flex justify-between items-center">
                <div>
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Assignment Submissions</h3>
                    <p class="mt-1 text-sm text-gray-500">Your submitted assignments and grades</p>
                </div>
                <div class="text-sm">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full bg-indigo-100 text-indigo-800">
                        <svg class="-ml-0.5 mr-1.5 h-2 w-2 text-indigo-400" fill="currentColor" viewBox="0 0 8 8">
                            <circle cx="4" cy="4" r="3" />
                        </svg>
                        @gradedAssignments of @totalAssignments graded
                    </span>
                </div>
            </div>

            @if (assignmentSubmissions == null || !assignmentSubmissions.Any())
            {
                <div class="px-4 py-12 text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No assignment submissions yet</h3>
                    <p class="mt-1 text-sm text-gray-500">Submit assignments to track your progress</p>
                </div>
            }
            else
            {
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assignment</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Module</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Submission Date</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Grade</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var submission in assignmentSubmissions)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">@submission.Assignment.Title</div>
                                        <div class="text-xs text-gray-500 truncate max-w-xs">@submission.Assignment.Description?.Substring(0, Math.Min(60, submission.Assignment.Description?.Length ?? 0))</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-900">@submission.Assignment.Module.ModuleName</div>
                                        <div class="text-xs text-gray-500">@submission.Assignment.Module.ModuleCode</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @submission.SubmissionDate.ToString("yyyy-MM-dd HH:mm")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        @if (submission.Grade.HasValue)
                                        {
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                Graded
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                                Pending
                                            </span>
                                        }
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        @if (submission.Grade.HasValue)
                                        {
                                            <div class="text-sm font-medium text-gray-900">
                                                @submission.Grade.Value%
                                            </div>
                                            @if (!string.IsNullOrEmpty(submission.FeedbackFromLecturer))
                                            {
                                                <button class="text-xs text-gray-500 cursor-pointer hover:text-indigo-600 feedback-btn"
                                                        data-feedback="@submission.FeedbackFromLecturer">
                                                    View feedback
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-sm text-gray-400">Pending</span>
                                        }
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <a asp-action="ViewSubmission" asp-route-assignmentId="@submission.AssignmentId" class="text-indigo-600 hover:text-indigo-900 mr-3">View Details</a>
                                        <a href="@submission.FileUrl" target="_blank" class="text-indigo-600 hover:text-indigo-900">Download</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <!-- Feedback Modal -->
        <div id="feedback-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50 hidden">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
                <div class="px-4 py-5 sm:p-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Lecturer Feedback</h3>
                    <div id="feedback-content" class="text-sm text-gray-600 bg-gray-50 p-4 rounded border border-gray-200 mb-4 max-h-60 overflow-y-auto"></div>
                    <div class="mt-5 sm:mt-6">
                        <button id="close-feedback-modal" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include jsPDF library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanels = document.querySelectorAll('.tab-panel');

            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Reset all tabs
                    tabButtons.forEach(btn => {
                        btn.classList.remove('border-indigo-500', 'text-indigo-600');
                        btn.classList.add('border-transparent', 'text-gray-500');
                    });

                    tabPanels.forEach(panel => {
                        panel.classList.add('hidden');
                    });

                    // Activate clicked tab
                    this.classList.add('border-indigo-500', 'text-indigo-600');
                    this.classList.remove('border-transparent', 'text-gray-500');

                    // Show corresponding panel
                    const panelId = this.id.replace('tab-', '') + '-panel';
                    document.getElementById(panelId).classList.remove('hidden');
                });
            });

            // Accordion functionality
            const accordionHeaders = document.querySelectorAll('.accordion-header');
            accordionHeaders.forEach(header => {
                header.addEventListener('click', function() {
                    const content = this.nextElementSibling;
                    const arrow = this.querySelector('.accordion-arrow');

                    content.classList.toggle('hidden');
                    arrow.classList.toggle('transform');
                    arrow.classList.toggle('rotate-180');
                });
            });

            // Open first accordion by default
            if (accordionHeaders.length > 0) {
                accordionHeaders[0].click();
            }

            // Feedback modal functionality
            const feedbackBtns = document.querySelectorAll('.feedback-btn');
            const feedbackModal = document.getElementById('feedback-modal');
            const feedbackContent = document.getElementById('feedback-content');
            const closeFeedbackModal = document.getElementById('close-feedback-modal');

            feedbackBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const feedback = this.getAttribute('data-feedback');
                    feedbackContent.textContent = feedback;
                    feedbackModal.classList.remove('hidden');
                });
            });

            closeFeedbackModal.addEventListener('click', function() {
                feedbackModal.classList.add('hidden');
            });

            // Close modal when clicking outside
            feedbackModal.addEventListener('click', function(e) {
                if (e.target === feedbackModal) {
                    feedbackModal.classList.add('hidden');
                }
            });

            // PDF generation
            document.getElementById('generate-pdf-btn').addEventListener('click', function() {
                generatePDF();
            });

            async function generatePDF() {
                // Show loading indicator
                const button = document.getElementById('generate-pdf-btn');
                const originalText = button.innerHTML;
                button.innerHTML = `<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Generating...`;

                try {
                    // Fetch report data from the server
                    const response = await fetch('@Url.Action("DownloadProgressReport")');
                    if (!response.ok) {
                        throw new Error('Failed to fetch report data');
                    }

                    const reportData = await response.json();

                    // Create PDF document
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF();

                    // Add title
                    doc.setFontSize(18);
                    doc.setFont('helvetica', 'bold');
                    doc.text('Academic Progress Report', 105, 20, { align: 'center' });

                    // Add user info
                    doc.setFontSize(12);
                    doc.setFont('helvetica', 'normal');
                    doc.text(`Student: ${reportData.userFullName || reportData.userName}`, 20, 35);
                    doc.text(`Generated on: ${reportData.generatedDate}`, 20, 43);

                    // Add overall statistics
                    doc.setFontSize(14);
                    doc.setFont('helvetica', 'bold');
                    doc.text('Overall Statistics', 20, 55);

                    doc.setFontSize(10);
                    doc.setFont('helvetica', 'normal');

                    const statsData = [
                        ['Total Quizzes', reportData.totalQuizzes?.toString() || '0'],
                        ['Total Quiz Attempts', reportData.totalAttempts.toString()],
                        ['Completed Quiz Attempts', reportData.completedAttempts.toString()],
                        ['Average Quiz Score', reportData.averageScore.toFixed(1)],
                        ['Total Assignments', reportData.totalAssignments?.toString() || '0'],
                        ['Submitted Assignments', reportData.submittedAssignments?.toString() || '0'],
                        ['Average Assignment Grade', reportData.averageAssignmentGrade?.toFixed(1) || '0.0']
                    ];

                    doc.autoTable({
                        startY: 60,
                        head: [['Metric', 'Value']],
                        body: statsData,
                        theme: 'grid',
                        headStyles: { fillColor: [75, 85, 175] }
                    });

                    let yPos = doc.lastAutoTable.finalY + 15;

                    // Add module sections for quizzes
                    doc.setFontSize(14);
                    doc.setFont('helvetica', 'bold');
                    doc.text('Quiz Performance by Module', 20, yPos);
                    yPos += 10;

                    for (const moduleDetail of reportData.moduleDetails) {
                        // Check if we need a new page
                        if (yPos > 250) {
                            doc.addPage();
                            yPos = 20;
                        }

                        doc.setFontSize(12);
                        doc.setFont('helvetica', 'bold');
                        doc.text(`${moduleDetail.moduleName} (${moduleDetail.moduleCode})`, 20, yPos);

                        doc.setFontSize(10);
                        doc.setFont('helvetica', 'normal');
                        doc.text(`Course: ${moduleDetail.courseName}`, 20, yPos + 7);

                        // Prepare quiz data
                        const quizRows = moduleDetail.quizzes.map(quiz => [
                            quiz.quizTitle,
                            quiz.attemptCount.toString(),
                            quiz.bestScore.toFixed(1),
                            quiz.lastAttemptDate
                        ]);

                        // Add quiz table
                        doc.autoTable({
                            startY: yPos + 12,
                            head: [['Quiz Title', 'Attempts', 'Best Score', 'Last Attempt']],
                            body: quizRows,
                            theme: 'grid',
                            headStyles: { fillColor: [100, 100, 220] }
                        });

                        yPos = doc.lastAutoTable.finalY + 15;
                    }

                    // Add assignment section if available
                    if (reportData.assignmentSubmissions && reportData.assignmentSubmissions.length > 0) {
                        // Add a page break if needed
                        if (yPos > 220) {
                            doc.addPage();
                            yPos = 20;
                        }

                        doc.setFontSize(14);
                        doc.setFont('helvetica', 'bold');
                        doc.text('Assignment Submissions', 20, yPos);
                        yPos += 10;

                        // Prepare assignment data for table
                        const assignmentRows = reportData.assignmentSubmissions.map(submission => [
                            submission.title,
                            submission.moduleName,
                            submission.submissionDate,
                            submission.grade ? `${submission.grade}%` : 'Pending'
                        ]);

                        // Add assignment table
                        doc.autoTable({
                            startY: yPos,
                            head: [['Assignment', 'Module', 'Submitted On', 'Grade']],
                            body: assignmentRows,
                            theme: 'grid',
                            headStyles: { fillColor: [76, 175, 80] }
                        });
                    }

                    // Add footer
                    const pageCount = doc.internal.pages.length;
                    for (let i = 1; i <= pageCount; i++) {
                        doc.setPage(i);
                        doc.setFontSize(8);
                        doc.setTextColor(150);
                        doc.text('This report contains confidential academic information. Do not distribute.', 105, 290, { align: 'center' });
                        doc.text(`Page ${i} of ${pageCount}`, 195, 290, { align: 'right' });
                    }

                    // Save the PDF
                    const filename = `academic_progress_report_${reportData.generatedDate.replace(/[^0-9]/g, '')}.pdf`;
                    doc.save(filename);

                } catch (error) {
                    console.error('Error generating PDF:', error);
                    alert('There was an error generating the PDF report. Please try again later.');
                } finally {
                    // Restore button text
                    button.innerHTML = originalText;
                }
            }
        });
    </script>
}